/* КЛАСС ОТВЕТСТВЕННЫЙ ЗА ИГРОВОЙ ЭЛЕМЕНТ (КВАДРАТ ИГРОВОГО ПОЛЯ). */

#pragma once

#include "stdafx.h"
#include "tetrix_element_state.h"

/* Возможные направления движения игровых элементов. */
enum MoveVector
{
    MoveUp,
    MoveDown,
    MoveLeft,
    MoveRight
};


class GameElement
{
public:

    /* Конструктор игрового элемента:
     * ---> [x]         - начальная позиция элемента на игровом поле по оси абсцис.
     * ---> [y]         - начальная позиция элемента на игровом поле по оси ординат.
     * ---> [id_local]  - локальный идентификатор игрового элемента в рамках принадлежности к игровой фигуре.
     * ---> [id_global] - глобальный идентификатор игрового элемента в рамках всего игрового поля.
     * ---> [color]     - три числа в диапазоне целых числе от 0 до 255, отражающих цветовую палитру RGB - заливка игрового элемента. */
    GameElement(const uint& x, const uint& y, const uint8_t id_local, const uint64_t& id_global, const uint8_t color[3]);

    /* Конструктор игрового элемента:
     * ---> [x]         - начальная позиция элемента на игровом поле по оси абсцис.
     * ---> [y]         - начальная позиция элемента на игровом поле по оси ординат.
     * ---> [id_local]  - локальный идентификатор игрового элемента в рамках принадлежности к игровой фигуре.
     * ---> [id_global] - глобальный идентификатор игрового элемента в рамках всего игрового поля.
     * ---> [color]     - три числа в диапазоне целых числе от 0 до 255, отражающих цветовую палитру RGB - заливка игрового элемента.
     * ---> [state]     - начальное состояние игрового элемента на игровом поле (по умолчанию = Downing). */
    GameElement(const uint& x, const uint& y, const uint8_t id_local, const uint64_t& id_global, const uint8_t color[3], const StateTetrixElement& state);

    /* Возвращает цвет-границ игрового элемента. */
    QColor GetColor() const;

    /* Возвращает заливку игрового элемента. */
    QBrush GetBrush() const;

    /* Изменяет координаты элемента на в соглавии с напаравленим движения. */
    void MoveTo(const MoveVector& vector);

    /* Устанавливает координату X игрового элемента. */
    void SetX(const uint& x);

    /* Устанавливает координату Y игрового элемента. */
    void SetY(const uint& y);

    /* Возвращает текущую координату X игрового элемента. */
    uint GetX() const;

    /* Возвращает текущую координату Y игрового элемента. */
    uint GetY() const;

    /* Возвращает глобальный идентификатор игрового элемента (идентификаторв в масштабах игрового поля). */
    uint64_t GetID() const;

    /* Возвращает локальный идентификатор игрового элемента (идентификатор в масштабах игровой фигуры). */
    uint8_t GetId() const;

    /* Устанавливает состояние игрового элемента. */
    void SetState(const StateTetrixElement& state);

    /* Возвращает текущее состояние игрового элемента. */
    StateTetrixElement GetState() const;

    /* Проверяет, попадют ли текущие координаты игрового элемента в границы игрового поля:
     * Замечание: попадание в пределы границ считается успешным если координаты игрового элемента строго меньше размерностей игрового поля.
     * ---> [x_size] - ширина игрового поля.
     * ---> [y_size] - высота игрового поля. */
    bool CheckCondition(const uint& x_size, const uint& y_size) const;

private:

    /* Текущая координата X игрового элемента. */
    uint X;

    /* Текущая координата Y игрового элемента. */
    uint Y;

    /* Цветовая схема игового элемента. */
    uint8_t Color[3];

    /* Глобальный идентификатор игрового элемента в рамках игровго поля. */
    uint8_t ID_local;

    /* Глобальных идентификатор игровго элемента в рамках игровой фигуры. */
    uint64_t ID_global;

    /* Текущее состояние игрового элемента на игровом поле. */
    StateTetrixElement State;
};
