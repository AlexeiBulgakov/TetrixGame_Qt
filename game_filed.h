/* КЛАСС ОТВЕСТВЕННЫЙ ЗА ИГРОВОЕ ПОЛЕ */

#pragma once

#include "stdafx.h"
#include "game_figure.h"
#include "game_element.h"
#include "tetrix_figures.h"
#include "tetrix_element_state.h"


class GameFiled
{
public:

    /* Конструктор игрового пля:
     * ---> [x] - размерность поля по оси абсцис (в количестве игровых элементов).
     * ---> [y] - размерность поля по оси ординат (в количестве игровых элементов). */
    GameFiled(const uint& x, const uint& y);

    /* Произвести следующую итерацию игры:
     * Производимые действия:
     * 1) все игровые фигуры не достигшие препятствия под собой сдвигаются вниз на один игровой элемент.
     * 2) удаляются игровые элементы образовашие собой заполненную линию по ширине игрового поля. Все элементы выше удалённой линии сдвигаются на один элемент вниз.
     * <--- [size_t] - количество удалённых строк. */
    size_t NextStep();

    /* Добавляет указанную фигуру по середине в верху игрового поля. */
    void AddFigure(const TetrixFigure& figure);

    /* Перестройка игрового поля в соответствии с новыми размерами области обображения:
     * ---> [x]         - новое количество игровых элементов вмещаемых полем по оси абсцис.
     * ---> [y]         - новое количество игровых элементов вмещаемых полем по оси ординат.
     * <--- [size_t]    - количество игровых элементов которые были потеряны в процессе перестройки игрового поля. */
    size_t Reconstruct(const uint& x, const uint& y);

    /* Перемещает игровые фигуры в состоянии Downig в указанном направлении. */
    void MoveTo(const MoveVector& vertor);

    /* Вращает игровые фиругы в состоянии Downing в указанном направлении. */
    void RotateTo(const FigureDirection& direction);

    /* Предоставляет полный список игровых элементов подлежащих отображению на экране в форме структуры данных tuple.
     * Формат структуры данных описывающией игровой элемент - tuple<uint, uint, QColor, QBrush, StateTetrixElement>, где:
     * [uint]               - X-координата игрового элемента на игровом поле.
     * [uint]               - Y-координата игрового элемента на игровом поле.
     * [QColor]             - цветовая гамма границ игрового элемента.
     * [QBrush]             - цветовая гамма заливки игрового элемента.
     * [StateTetrixElement] - текущее состояние игрового элемента. */
    list<tuple<uint, uint, QColor, QBrush, StateTetrixElement>> GetListViewvalentElement() const;

    /* Возвращает число равное количеству игровых элементов, отстоящих от врехней граници игрового поля (в кубиках), при превышении которой игроку засчитывается поражение. */
    uint GetMBoder() const;

    /* Возвращает размерность игрового поля по оси абсцис. */
    uint GetX() const;

    /* Возвращает размерность игрового поля по оси ординат. */
    uint GetY() const;

    /* Очищает память не задействованную в ировом процессе.
     * Замечание: нет смысла вызывать чаще чем один раз в пять-десять минут. */
    void Clear();

private:

    /* Обновление игровго поля до актуального состояния. */
    size_t Update();

    /* Удаляет из игрового поля заполнные строки:
     * <--- [size_t] - количество удалённых строк. */
    size_t DelletCompletedRows();

private:

    /* Размерность игрового поля по оси абсцис. */
    uint X_size {0};

    /* Размерность игрового поля по оси ординат. */
    uint Y_size {0};

    /* Граница, отстоящаяя (в кубиках) от верхней границы игрового поля, при превышении которой игроку засчитывется поражение. */
    uint M_size {5};

    /* Счётчик глобальных идентификторов:
     * Описание: при появлении на игровом поле новой игровой фигуры ей присвается текущйи глобальный идентификтор, послед чего его значение в классе игрового поля увеличивается. */
    uint64_t ID {1};

    /* Матрица представления игрового поля:
     * Описание: каждый элемент матрицы представляет из себя структуру - tuple<bool, uint64_t, uint8_t>, где:
     * [bool]       - флаг наличия на игровом поле игрового элемента.
     * [uint64_t]   - глобальный идентификатор игрового элемента (для посика среди игровых фигур).
     * [uint8_t]    - локальный идентификатор игрового элемента (для поиска среди подконтрольных элементов игровой фигуры). */
    vector<vector<tuple<bool, uint64_t, uint8_t>>> Field;

    /* Карта игровых элеметов, где:
     * key - [uintg4_t]     - глобальный идентификатор игровой фигуры.
     * value - [GameFigure] - игровая фигура. */
    map<uint64_t, GameFigure> Figures;
};
