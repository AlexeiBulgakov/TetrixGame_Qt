/* Класс-виджет-gui, ответственный за отрисовку главного игрового поля Tetrix: 
 * Замечание: сам по себе класс не реализует логику игрового процесса, но только предоставлят органы управленяия классом GameFieled.
 * Важно: класс содержит и реализут управления двумя таймерами: _timer_show и _timer_update, - по сигналу которых: происходит перерисовка игрового поля и следующая итерация игрового процесса. */

#pragma once

#include "stdafx.h"
#include "game_filed.h"


class GUITetrixGameField : public QGraphicsView
{
	
	/* Внутренная семантика класса:
	 * [GF] - указание на то, что помеченный метод/фукция класса вызывают аналогичный метод/функцию класса GameFieled. */

    Q_OBJECT

public:
	
	/* Конструктор игрового поля:
	 * ---> [parent]				- виджет на котором должна располагаться игровая область.
	 * ---> [one_element_size] 		- рамезность элемента (клеточки) подконтрольного игрового поля. */
    GUITetrixGameField(QWidget* parent, uint one_element_size);

	/* Запуск игрового процесса с текущими игровыми параметрами.
	 * Замечание: при первичной инициализации игрового процесса действие фукции аналогично фукции Restart. */
    void Start();
	
	/* Приостановка игрового процесса (фиксация на период приостановки текущих игровых параметров). */
    void Pause();

	/* Запуск игрового процесса с игровыми параметрами по умолчанию. */
    void Restart();

	/* [GF] */
    void MoveTo(const MoveVector& vertor);

	/* [GF] */
    void RotateTo(const FigureDirection& direction);

	/* Обновление частоты срабатывания таймера _timer_update: 
	 * Особенность: [новая частота] = [частота по умолчанию] - [текущий уровень сложности] * [размерность игрового поля по ширине].
	 * Замечание: частота срабатывания таймера _timer_update не может быть ниже 10.
	 * ---> [current_level] - текущий уровень сложности игры. */
    void SpeedUpdate(size_t current_level);

	/* Возращает текущую размерность игрового поля по ширине (в клеточках). */
    uint GetXSize() const;

	/* Возращает текущую размерность игрового поля по высоте (в клеточках). */
    uint GetYSize() const;

signals:

	/* Сигнал удаления с игрового поля заполненных строк:
	 * [size_t] - количество строк которые были удалены с игровго поля. */
    void DelletedRows(size_t);

	/* Сигнал изменения количества активных игровых элементов в состоянии Removed:
	 * [size_t] - количество дезактивированных игровых элементов. */
    void RemovedElements(size_t);

public slots:

	/* Обработка сиграла таймера _timer_update:
	 * Описание: производит слудующую итерацию игровго процесса. */
    void Update();

	/* Обработка сигнала таймера _timer_show:
	 * Описание: производит перерисовку игровго поля. */
    void Reprint();

	/* Обработка сигнала изменения рамера игрового поля. */
    void resizeEvent(QResizeEvent* event) override;

protected:

	/* Параметры игрового процесса: */
	
	/* Текущая размерность игрового поля по ширине. */
    uint _fild_size_w {0};
	
	/* Текущая размерность игрового поля по высоте. */
    uint _fild_size_h {0};
	
	/* Размерность элемента (клеточки) подконтрольного игрового поля:
	 * Замечание: величина остаётся неизменной на протяжении всей игровой сессии - времени жизни конкретного экземпляра класса. */
    uint _one_element_size {0};
	
	/* Начальная частота срабатывания таймера _timer_update. */
    uint _up_limit_current_speed{200};
	
	/* Текущая частота срабатывания таймера _timer_update. */
    uint _current_speed{_up_limit_current_speed};
	
	/* Подконтрольный экземпляр класса отвествнный за игровое поле:
     * Замечание: главный объект управления класса. */
    GameFiled* GF {nullptr};

private:

	/* Структурирование графических элементов класса. */
    void SetupUi(QWidget* parent);
	
	/* Соединение сигнал-слот логики класса. */
    void SetupSS();

    /* Таймер по сигналу которого обновляется картинка на экране. */
    QTimer* _timer_show;

    /* Таймер по сигналу которого происходит следующая итерация игрового процесса. */
    QTimer* _timer_update;
	
	/* Иерахическая зависимость внутренних (подконтрольных) графических элементов. */
    QGraphicsScene* _graphic_scene_game_field;
        QGraphicsItemGroup* _graphic_items_tetrix_elements;
};
